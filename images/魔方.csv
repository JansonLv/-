魔法方法,含义
,基本的魔法方法
"**\_\_new\_\_** (cls[, ...])",1. **\_\_new\_\_** 是在一个对象实例化的时候所调用的第一个方法
,2. 它的第一个参数是这个类，其他的参数是用来直接传递给 **\_\_init\_\_** 方法
,3. **\_\_new\_\_** 决定是否要使用该 **\_\_init\_\_** 方法，因为 **\_\_new\_\_** 可以调用其他类的构造方法或者直接返回别的实例对象来作为本类的实例，如果 **\_\_new\_\_** 没有返回实例对象，则 **\_\_init\_\_** 不会被调用
,4. **\_\_new\_\_** 主要是用于继承一个不可变的类型比如一个 tuple 或者 string
"**\_\_init\_\_**(self[, ...])",构造器，当一个实例被创建的时候调用的初始化方法
**\_\_del\_\_**(self),析构器，当一个实例被销毁的时候调用的方法
"**\_\_call\_\_**(self[, args...])","允许一个类的实例像函数一样被调用：x(a, b) 调用 x.**\_\_call\_\_**(a, b)"
**\_\_len\_\_**(self),定义当被 len() 调用时的行为
**\_\_repr\_\_**(self),定义当被 repr() 调用时的行为
**\_\_str\_\_**(self),定义当被 str() 调用时的行为
**\_\_bytes\_\_**(self),定义当被 bytes() 调用时的行为
**\_\_hash\_\_**(self),定义当被 hash() 调用时的行为
**\_\_bool\_\_**(self),定义当被 bool() 调用时的行为，应该返回 True 或 False
"**\_\_format\_\_**(self, format_spec)",定义当被 format() 调用时的行为
,有关属性
"**\_\_getattr\_\_**(self, name)",定义当用户试图获取一个不存在的属性时的行为
"**\_\_getattribute\_\_**(self, name)",定义当该类的属性被访问时的行为
"**\_\_setattr\_\_**(self, name, value)",定义当一个属性被设置时的行为
"**\_\_delattr\_\_**(self, name)",定义当一个属性被删除时的行为
**\_\_dir\_\_**(self),定义当 dir() 被调用时的行为
"**\_\_get\_\_**(self, instance, owner)",定义当描述符的值被取得时的行为
"**\_\_set\_\_**(self, instance, value)",定义当描述符的值被改变时的行为
"**\_\_delete\_\_**(self, instance)",定义当描述符的值被删除时的行为
,比较操作符
"**\_\_lt\_\_**(self, other)",定义小于号的行为：x < y 调用 x.**\_\_lt\_\_**(y)
"**\_\_le\_\_**(self, other)",定义小于等于号的行为：x <= y 调用 x.**\_\_le\_\_**(y)
"**\_\_eq\_\_**(self, other)",定义等于号的行为：x == y 调用 x.**\_\_eq\_\_**(y)
"**\_\_ne\_\_**(self, other)",定义不等号的行为：x != y 调用 x.**\_\_ne\_\_**(y)
"**\_\_gt\_\_**(self, other)",定义大于号的行为：x > y 调用 x.**\_\_gt\_\_**(y)
"**\_\_ge\_\_**(self, other)",定义大于等于号的行为：x >= y 调用 x.**\_\_ge\_\_**(y)
,算数运算符
"**\_\_add\_\_**(self, other)",定义加法的行为：+
"**\_\_sub\_\_**(self, other)",定义减法的行为：-
"**\_\_mul\_\_**(self, other)",定义乘法的行为：*
"**\_\_truediv\_\_**(self, other)",定义真除法的行为：/
"**\_\_floordiv\_\_**(self, other)",定义整数除法的行为：//
"**\_\_mod\_\_**(self, other)",定义取模算法的行为：%
"**\_\_divmod\_\_**(self, other)",定义当被 divmod() 调用时的行为
"**\_\_pow\_\_**(self, other[, modulo])",定义当被 power() 调用或 ** 运算时的行为
"**\_\_lshift\_\_**(self, other)",定义按位左移位的行为：<<
"**\_\_rshift\_\_**(self, other)",定义按位右移位的行为：>>
"**\_\_and\_\_**(self, other)",定义按位与操作的行为：&
"**\_\_xor\_\_**(self, other)",定义按位异或操作的行为：^
"**\_\_or\_\_**(self, other)",定义按位或操作的行为：|
,反运算
"**\_\_radd\_\_**(self, other)",（与上方相同，当左操作数不支持相应的操作时被调用）
"**\_\_rsub\_\_**(self, other)",（与上方相同，当左操作数不支持相应的操作时被调用）
"**\_\_rmul\_\_**(self, other)",（与上方相同，当左操作数不支持相应的操作时被调用）
"**\_\_rtruediv\_\_**(self, other)",（与上方相同，当左操作数不支持相应的操作时被调用）
"**\_\_rfloordiv\_\_**(self, other)",（与上方相同，当左操作数不支持相应的操作时被调用）
"**\_\_rmod\_\_**(self, other)",（与上方相同，当左操作数不支持相应的操作时被调用）
"**\_\_rdivmod\_\_**(self, other)",（与上方相同，当左操作数不支持相应的操作时被调用）
"**\_\_rpow\_\_**(self, other)",（与上方相同，当左操作数不支持相应的操作时被调用）
"**\_\_rlshift\_\_**(self, other)",（与上方相同，当左操作数不支持相应的操作时被调用）
"**\_\_rrshift\_\_**(self, other)",（与上方相同，当左操作数不支持相应的操作时被调用）
"**\_\_rand\_\_**(self, other)",（与上方相同，当左操作数不支持相应的操作时被调用）
"**\_\_rxor\_\_**(self, other)",（与上方相同，当左操作数不支持相应的操作时被调用）
"**\_\_ror\_\_**(self, other)",（与上方相同，当左操作数不支持相应的操作时被调用）
,增量赋值运算
"**\_\_iadd\_\_**(self, other)",定义赋值加法的行为：+=
"**\_\_isub\_\_**(self, other)",定义赋值减法的行为：-=
"**\_\_imul\_\_**(self, other)",定义赋值乘法的行为：*=
"**\_\_itruediv\_\_**(self, other)",定义赋值真除法的行为：/=
"**\_\_ifloordiv\_\_**(self, other)",定义赋值整数除法的行为：//=
"**\_\_imod\_\_**(self, other)",定义赋值取模算法的行为：%=
"**\_\_ipow\_\_**(self, other[, modulo])",定义赋值幂运算的行为：**=
"**\_\_ilshift\_\_**(self, other)",定义赋值按位左移位的行为：<<=
"**\_\_irshift\_\_**(self, other)",定义赋值按位右移位的行为：>>=
"**\_\_iand\_\_**(self, other)",定义赋值按位与操作的行为：&=
"**\_\_ixor\_\_**(self, other)",定义赋值按位异或操作的行为：^=
"**\_\_ior\_\_**(self, other)",定义赋值按位或操作的行为：|=
,一元操作符
**\_\_pos\_\_**(self),定义正号的行为：+x
**\_\_neg\_\_**(self),定义负号的行为：-x
**\_\_abs\_\_**(self),定义当被 abs() 调用时的行为
**\_\_invert\_\_**(self),定义按位求反的行为：~x
,类型转换
**\_\_complex\_\_**(self),定义当被 complex() 调用时的行为（需要返回恰当的值）
**\_\_int\_\_**(self),定义当被 int() 调用时的行为（需要返回恰当的值）
**\_\_float\_\_**(self),定义当被 float() 调用时的行为（需要返回恰当的值）
"**\_\_round\_\_**(self[, n])",定义当被 round() 调用时的行为（需要返回恰当的值）
**\_\_index\_\_**(self),1. 当对象是被应用在切片表达式中时，实现整形强制转换
,"2. 如果你定义了一个可能在切片时用到的定制的数值型,你应该定义 **\_\_index\_\_**"
,3. 如果 **\_\_index\_\_** 被定义，则 **\_\_int\_\_** 也需要被定义，且返回相同的值
,上下文管理（with 语句）
**\_\_enter\_\_**(self),1. 定义当使用 with 语句时的初始化行为
,2. **\_\_enter\_\_** 的返回值被 with 语句的目标或者 as 后的名字绑定
"**\_\_exit\_\_**(self, exc_type, exc_value, traceback)",1. 定义当一个代码块被执行或者终止后上下文管理器应该做什么
,2. 一般被用来处理异常，清除工作或者做一些代码块执行完毕之后的日常工作
,容器类型
**\_\_len\_\_**(self),定义当被 len() 调用时的行为（返回容器中元素的个数）
"**\_\_getitem\_\_**(self, key)",定义获取容器中指定元素的行为，相当于 self[key]
"**\_\_setitem\_\_**(self, key, value)",定义设置容器中指定元素的行为，相当于 self[key] = value
"**\_\_delitem\_\_**(self, key)",定义删除容器中指定元素的行为，相当于 del self[key]
**\_\_iter\_\_**(self),定义当迭代容器中的元素的行为 通常返回self
**\_\_next__**(self), 配合\_\_iter__ 返回属性
**\_\_reversed\_\_**(self),定义当被 reversed() 调用时的行为 通常为列表的反转
"**\_\_contains\_\_**(self, item)",定义当使用成员测试运算符（in 或 not in）时的行为